#!/usr/bin/ruby

###########################################################
## folderize
##
## A tool to help quickly rename and create correct folder
## structure for files
## 
###########################################################

require 'fileutils'
require 'io/console'
#include FileUtils::Verbose


###########################################################
## ask
###########################################################
def ask(question, quit = false)
    while true 
        if quit
            print question + " (y/n/q):  "
        else
            print question + " (y/n):  "
        end
        yn = STDIN.getch
        next if yn.nil? or yn.empty?
        yn.chomp!
        if yn == 'y'
            return true
        elsif yn == 'n'
            return false
        elsif quit and yn == 'q'
            return nil
        else 
            redo
        end
    end
end


###########################################################
## getidx
###########################################################
def getidx(question, low, high)
  if low == high
    puts "Choosing " + low.to_s
    return [low]
  end
  while true
    print question + ": "
    res = $stdin.gets
    redo if res.nil? or res.empty?
    idxs = res.chomp.split(" ")
    nums = Array.new
    idxs.each do |idx|
      if !(range = idx.match(/([1-9])*-([1-9])*/)).nil?
        if !range[1].nil? and !range[2].nil?
          range[1].to_i.upto(range[2].to_i) do |x|
            nums << x
          end
        elsif range[1].nil? and !range[2].nil?
          low.upto(range[2].to_i) do |x|
            nums << x
          end
        elsif !range[1].nil? and range[2].nil?
          range[1].to_i.upto(high) do |x|
            nums << x
          end
        end
      elsif idx.to_i
        nums << idx.to_i 
      end
    end
    
    nums.each do |num|
      if num.to_i < low or num.to_i > high 
        print "Invalid Index: " + idx
        redo
      end
    end
    return nums.uniq.sort
  end
end


###########################################################
## parse
###########################################################
def parse(file)
    parts = Array.new

    puts "\n------------------------------------------\n"
    puts "Loading file: " + file + "\n"
        
    if file.include?(" by ") 
        if ask "Divide with word 'by'?"
            parts = file.split(" by ")
        end
    elsif file.include?(" - ") 
        if ask "Divide with ' - '?"
            parts = file.split(" - ")
        end
    end
    
    while not parts.any?
        print "Choose delineator: " 
        del = $stdin.gets.chomp!

        if del.nil? 
            next
        elsif not del.empty? and not file.include?(del)
            puts "Delineator not found. Try again..."
            next
        elsif del.empty?
            parts << file
            break
        end
        
        parts = file.split(del)
        if del == '(' 
            parts = parts + parts.last.split(')') - [parts.last]
        end
    end
    
    return parts
end        


###########################################################
## concatenate
###########################################################
def concatenate(array)
    idxs = getidx("Concatenate which?" ,1, array.size)
    print "Separator? "
    joint = $stdin.gets.chomp
    rem = Array.new
    res = String.new
    sub = 1
    idxs.each do |idx|
        res << joint if sub > 1
        sub = sub + 1
        rem << array[idx - 1]
        res << array[idx - 1]
    end
    return (array - rem) << res
end


###########################################################
## delete
###########################################################
def delete(array)
    idxs = getidx("Delete which?" ,1, array.size)
    dels = Array.new
    idxs.each do |idx|
        dels << array[idx - 1]
    end
    return array - dels
end


###########################################################
## separate
## FIXME: Separate by indecies like 'cut' 
###########################################################
def separate(array)
    idxs = getidx("Operate on which? ",1, array.size)
    print "Separator? "
    sep = $stdin.gets.chomp
    narr = Array.new
    rem = Array.new
    idxs.each do |idx|
        narr << array[idx - 1].split(sep)
        rem  << array[idx - 1]
    end
    return array - rem
end


###########################################################
## mkfolder
##
## Creates a folder with error protection and changes to
## that directory if enter == true
##
## Returns the new folder name
###########################################################
def mkfolder(path, enter=false)
  begin  
    FileUtils.mkdir(path)
    FileUtils.chdir(path) if enter
  rescue Errno::EEXIST
    while true
      print "Directory Exists:\n\t1) Merge\n\t2) Replace\n\t3) Rename\n\t4 Abort\n\n"
      print "Choose: "
      ans = $stdin.gets 
      redo if ans.nil? or ans.empty?
      ans.chomp!
      redo if ans.to_i > 4 or ans.to_i < 1
      break
    end
    case ans.to_i
    when 1
      FileUtils.chdir(path) if enter
      return path
    when 2
      print "Are you sure? (y): "
      ans = $stdin.gets
      if ans.to_s == 'y'   
        FileUtils.rm_rf(path)
        FileUtils.mkdir(path)
        FileUtils.chdir(path) if enter
        return path
      else
        puts "Aborting..."
        exit 1
      end
    when 3
      print "Enter new name:  "
      newpath = $stdin.gets
      mkfolder(newpath, enter)
      return newpath
    when 4
      puts "Aborting..."
      exit 1
    end
  end
  return path
end


###########################################################
## mkdirs - Create the directories
##
## Creates a folder structure from an array of names
## and then enters it if enter == true
###########################################################
def mkdirs(folders, enter=false)
    oldCWD = FileUtils.pwd
    path = folders.join("/")
    folders.delete_at(folders.size - 1)
    folders.each do |f|
      mkfolder(f, true)
    end
    FileUtils.chdir(oldCWD) unless enter
end


###########################################################
## clean
###########################################################
def clean(array)
    puts "0) All\n"
    idxs = getidx("Operate on which?",0,array.size) 
    idxs.each do |idx|
        if idx == 0
            array.each do |line|
                line.gsub!(/_/, ' ')
            end
        end
        array[idx - 1].gsub!(/_/,' ')
    end
    
    return array
end


###########################################################
## cut
###########################################################
def cut(text)
    ans = getidx("Operate on which? ", 1, text.size).first
    puts "\n\n------------------------------" 
    puts text[ans - 1]
    i = 1
    words = text[ans - 1].split(/[ _]/)
    words.each do |word|
        print i
        word.size.times do 
            print ' '
        end
        i = i + 1
    end
    idxs = getidx("\nDelete Indecies or Range [x-y]",1,words.size)
    rem = Array.new
    idxs.each do |idx|
        rem << words[idx - 1]
    end
    
    text[ans.to_i - 1] = (words - rem).join(" ")
    return text
end


###########################################################
## add
###########################################################
def add(array)
    print "Enter String:  "
    ans = $stdin.gets
    return nil if ans.nil? or ans.empty?
    ans.chomp!
    return array << ans
end


###########################################################
## choose
###########################################################
def choose(pleft, folders = Array.new)
    
    while true do
        puts "\n\n###################################################"
        puts "------ " + folders.join('/') + " -----"
        puts "Add Path: "

        i = 1
        pleft.each do |p|
            puts i.to_s + ") " + p
            i = i + 1
        end
        
        puts "\n---------\n" 
        puts " a ) Add"
        puts " c ) Cut"
        puts " o ) Concat"
        puts " d ) Delete"
        puts " v ) Divide"
        puts " l ) Clean"
        puts " n ) Next"
        puts " f ) Finished"
        puts " q ) Quit"
        puts "\n---------\n" 
        
        while true
            print "Choose: "
            ans = STDIN.getch 
            redo if ans.nil? or ans.empty?
            
            redo if ans.to_i != 0 and ans.to_i > i or ans.to_i < 0
            break
        end
        
        res = nil
        case ans
        when "a"
            while res.nil? 
                res = add(pleft)
            end
            pleft = res
            redo
        when "c"
            while res.nil? 
                res = cut(pleft)
            end
            pleft = res
            redo
        when "o"
            while res.nil? 
                res = concatenate(pleft)
            end
            pleft = res
            redo
        when "d"
            while res.nil? 
                res = delete(pleft)
            end
            pleft = res
            redo
        when "v"
            while res.nil?
                res = separate(pleft) 
            end
            pleft = res
            redo
        when "l"
            while res.nil?
                res = clean(pleft)
            end
            pleft = res
            redo
        when "n"
          folders = nil
          break
        when "f"
            if folders.nil? or folders.empty?
                exit 0 if ask("You have no selected folders. Quit?")
                redo
            end
            break
        when "q"
          exit 0
        end
        
        folders << pleft.delete_at(ans.to_i - 1)
        
    end
    
    return folders
end

###########################################################
## Main loop
###########################################################
ARGV.each do |file|
    
    exists = true
    if not File.exists?(file) 
         exit 0 unless ask "Directory does not exist; Create directories anyhow?"
         exists = false
    end
    
    if File.directory?(file)
      file = file.delete('/')
    end
    
    pleft = parse(File.basename(file, ".*"))
    folders = choose(pleft)
    next if folders.nil?
    path = folders.join("/")
    
    while true 
        ans = ask("++++ Move ++++ " + file + " ----> " + path, true)
        
        if ans.nil?
            exit 0
        elsif ans
          if File.file?(file)
            newfolder = mkfolder(File.basename(file, ".*"))
            FileUtils.mv(file, newfolder)
            file = newfolder
          end
          mkdirs(folders)
          FileUtils.mv(file, path) if exists
          break
        else
          folders = choose(pleft, folders)
          path = folders.join("/")
          next
        end
    end
end
